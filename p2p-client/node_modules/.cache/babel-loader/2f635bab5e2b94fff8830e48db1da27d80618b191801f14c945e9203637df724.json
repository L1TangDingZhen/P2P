{"ast":null,"code":"import * as signalR from '@microsoft/signalr';\nclass SignalRService {\n  constructor() {\n    this.connection = null;\n    this.connectionPromise = null;\n    this.reconnectAttempts = 0;\n    this.eventHandlers = {\n      onReceiveMessage: null,\n      onReceiveFileMetadata: null,\n      onReceiveFileChunk: null,\n      onFileTransferComplete: null,\n      onDeviceStatusChanged: null,\n      onOnlineDevices: null,\n      onError: null,\n      onConnectionClosed: null,\n      onConnectionEstablished: null\n    };\n  }\n  startConnection(userId, deviceId) {\n    if (this.connectionPromise) {\n      return this.connectionPromise;\n    }\n    console.log('Starting SignalR connection for user:', userId);\n    try {\n      // 简化配置并优先使用WebSockets\n      this.connection = new signalR.HubConnectionBuilder().withUrl('http://localhost:5235/p2phub', {\n        transport: signalR.HttpTransportType.WebSockets\n      }).withAutomaticReconnect().configureLogging(signalR.LogLevel.Information).build();\n      console.log('SignalR connection object built');\n      this.setupEventHandlers();\n    } catch (error) {\n      console.error('Error building SignalR connection:', error);\n      throw error;\n    }\n    this.connectionPromise = this.connection.start().then(() => {\n      console.log('SignalR connected!');\n      this.connection.onclose(error => {\n        console.log('SignalR connection closed', error);\n        this.connectionPromise = null;\n        // 当连接关闭时，触发事件\n        if (this.eventHandlers.onConnectionClosed) {\n          this.eventHandlers.onConnectionClosed(error);\n        }\n      });\n      return this.registerConnection(userId, deviceId);\n    }).catch(err => {\n      console.error('SignalR connection error:', err);\n      this.connectionPromise = null;\n      // 尝试最多重连3次\n      if (this.reconnectAttempts < 3) {\n        this.reconnectAttempts++;\n        console.log(`Reconnection attempt ${this.reconnectAttempts}/3...`);\n        return new Promise(resolve => {\n          setTimeout(() => {\n            resolve(this.startConnection(userId, deviceId));\n          }, 2000);\n        });\n      }\n      throw err;\n    });\n    return this.connectionPromise;\n  }\n  setupEventHandlers() {\n    this.connection.on('ReceiveMessage', message => {\n      if (this.eventHandlers.onReceiveMessage) {\n        this.eventHandlers.onReceiveMessage(message);\n      }\n    });\n    this.connection.on('ReceiveFileMetadata', message => {\n      if (this.eventHandlers.onReceiveFileMetadata) {\n        this.eventHandlers.onReceiveFileMetadata(message);\n      }\n    });\n    this.connection.on('ReceiveFileChunk', (senderDeviceId, fileChunk) => {\n      if (this.eventHandlers.onReceiveFileChunk) {\n        this.eventHandlers.onReceiveFileChunk(senderDeviceId, fileChunk);\n      }\n    });\n    this.connection.on('FileTransferComplete', fileId => {\n      if (this.eventHandlers.onFileTransferComplete) {\n        this.eventHandlers.onFileTransferComplete(fileId);\n      }\n    });\n    this.connection.on('DeviceStatusChanged', (deviceId, isOnline) => {\n      if (this.eventHandlers.onDeviceStatusChanged) {\n        this.eventHandlers.onDeviceStatusChanged(deviceId, isOnline);\n      }\n    });\n    this.connection.on('OnlineDevices', devices => {\n      if (this.eventHandlers.onOnlineDevices) {\n        this.eventHandlers.onOnlineDevices(devices);\n      }\n    });\n    this.connection.on('Error', message => {\n      console.error('Hub error:', message);\n      if (this.eventHandlers.onError) {\n        this.eventHandlers.onError(message);\n      }\n    });\n  }\n  async registerConnection(userId, deviceId) {\n    console.log('Registering connection for userId:', userId, 'deviceId:', deviceId);\n    try {\n      await this.connection.invoke('RegisterConnection', userId, deviceId);\n      console.log('Connection registered successfully');\n    } catch (error) {\n      console.error('Error registering connection:', error);\n      throw error;\n    }\n  }\n  async sendMessage(userId, deviceId, messageContent) {\n    await this.ensureConnection();\n    return this.connection.invoke('SendMessage', userId, deviceId, messageContent);\n  }\n  async sendFileMetadata(userId, deviceId, fileMetadata) {\n    await this.ensureConnection();\n    return this.connection.invoke('SendFileMetadata', userId, deviceId, fileMetadata);\n  }\n  async sendFileChunk(userId, deviceId, fileId, chunk, chunkIndex, totalChunks) {\n    await this.ensureConnection();\n    return this.connection.invoke('SendFileChunk', userId, deviceId, fileId, chunk, chunkIndex, totalChunks);\n  }\n  async ensureConnection() {\n    if (!this.connection || this.connection.state !== signalR.HubConnectionState.Connected) {\n      throw new Error('SignalR connection not established. Call startConnection first.');\n    }\n  }\n  on(eventName, callback) {\n    if (this.eventHandlers.hasOwnProperty(eventName)) {\n      this.eventHandlers[eventName] = callback;\n    } else {\n      console.warn(`Unknown event name: ${eventName}`);\n    }\n  }\n  stopConnection() {\n    if (this.connection) {\n      this.connection.stop();\n      this.connection = null;\n      this.connectionPromise = null;\n    }\n  }\n}\n\n// 创建实例并导出，避免匿名默认导出\nconst signalRService = new SignalRService();\nexport default signalRService;","map":{"version":3,"names":["signalR","SignalRService","constructor","connection","connectionPromise","reconnectAttempts","eventHandlers","onReceiveMessage","onReceiveFileMetadata","onReceiveFileChunk","onFileTransferComplete","onDeviceStatusChanged","onOnlineDevices","onError","onConnectionClosed","onConnectionEstablished","startConnection","userId","deviceId","console","log","HubConnectionBuilder","withUrl","transport","HttpTransportType","WebSockets","withAutomaticReconnect","configureLogging","LogLevel","Information","build","setupEventHandlers","error","start","then","onclose","registerConnection","catch","err","Promise","resolve","setTimeout","on","message","senderDeviceId","fileChunk","fileId","isOnline","devices","invoke","sendMessage","messageContent","ensureConnection","sendFileMetadata","fileMetadata","sendFileChunk","chunk","chunkIndex","totalChunks","state","HubConnectionState","Connected","Error","eventName","callback","hasOwnProperty","warn","stopConnection","stop","signalRService"],"sources":["C:/Users/11427/Desktop/P2P/p2p-client/src/services/SignalRService.js"],"sourcesContent":["import * as signalR from '@microsoft/signalr';\r\n\r\nclass SignalRService {\r\n  constructor() {\r\n    this.connection = null;\r\n    this.connectionPromise = null;\r\n    this.reconnectAttempts = 0;\r\n    this.eventHandlers = {\r\n      onReceiveMessage: null,\r\n      onReceiveFileMetadata: null,\r\n      onReceiveFileChunk: null,\r\n      onFileTransferComplete: null,\r\n      onDeviceStatusChanged: null,\r\n      onOnlineDevices: null,\r\n      onError: null,\r\n      onConnectionClosed: null,\r\n      onConnectionEstablished: null\r\n    };\r\n  }\r\n\r\n  startConnection(userId, deviceId) {\r\n    if (this.connectionPromise) {\r\n      return this.connectionPromise;\r\n    }\r\n\r\n    console.log('Starting SignalR connection for user:', userId);\r\n    \r\n    try {\r\n      // 简化配置并优先使用WebSockets\r\n      this.connection = new signalR.HubConnectionBuilder()\r\n        .withUrl('http://localhost:5235/p2phub', {\r\n          transport: signalR.HttpTransportType.WebSockets\r\n        })\r\n        .withAutomaticReconnect()\r\n        .configureLogging(signalR.LogLevel.Information)\r\n        .build();\r\n        \r\n      console.log('SignalR connection object built');\r\n      \r\n      this.setupEventHandlers();\r\n    } catch (error) {\r\n      console.error('Error building SignalR connection:', error);\r\n      throw error;\r\n    }\r\n\r\n    this.connectionPromise = this.connection.start()\r\n      .then(() => {\r\n        console.log('SignalR connected!');\r\n        this.connection.onclose(error => {\r\n          console.log('SignalR connection closed', error);\r\n          this.connectionPromise = null;\r\n          // 当连接关闭时，触发事件\r\n          if (this.eventHandlers.onConnectionClosed) {\r\n            this.eventHandlers.onConnectionClosed(error);\r\n          }\r\n        });\r\n        return this.registerConnection(userId, deviceId);\r\n      })\r\n      .catch(err => {\r\n        console.error('SignalR connection error:', err);\r\n        this.connectionPromise = null;\r\n        // 尝试最多重连3次\r\n        if (this.reconnectAttempts < 3) {\r\n          this.reconnectAttempts++;\r\n          console.log(`Reconnection attempt ${this.reconnectAttempts}/3...`);\r\n          return new Promise(resolve => {\r\n            setTimeout(() => {\r\n              resolve(this.startConnection(userId, deviceId));\r\n            }, 2000);\r\n          });\r\n        }\r\n        throw err;\r\n      });\r\n\r\n    return this.connectionPromise;\r\n  }\r\n\r\n  setupEventHandlers() {\r\n    this.connection.on('ReceiveMessage', message => {\r\n      if (this.eventHandlers.onReceiveMessage) {\r\n        this.eventHandlers.onReceiveMessage(message);\r\n      }\r\n    });\r\n\r\n    this.connection.on('ReceiveFileMetadata', message => {\r\n      if (this.eventHandlers.onReceiveFileMetadata) {\r\n        this.eventHandlers.onReceiveFileMetadata(message);\r\n      }\r\n    });\r\n\r\n    this.connection.on('ReceiveFileChunk', (senderDeviceId, fileChunk) => {\r\n      if (this.eventHandlers.onReceiveFileChunk) {\r\n        this.eventHandlers.onReceiveFileChunk(senderDeviceId, fileChunk);\r\n      }\r\n    });\r\n\r\n    this.connection.on('FileTransferComplete', fileId => {\r\n      if (this.eventHandlers.onFileTransferComplete) {\r\n        this.eventHandlers.onFileTransferComplete(fileId);\r\n      }\r\n    });\r\n\r\n    this.connection.on('DeviceStatusChanged', (deviceId, isOnline) => {\r\n      if (this.eventHandlers.onDeviceStatusChanged) {\r\n        this.eventHandlers.onDeviceStatusChanged(deviceId, isOnline);\r\n      }\r\n    });\r\n\r\n    this.connection.on('OnlineDevices', devices => {\r\n      if (this.eventHandlers.onOnlineDevices) {\r\n        this.eventHandlers.onOnlineDevices(devices);\r\n      }\r\n    });\r\n\r\n    this.connection.on('Error', message => {\r\n      console.error('Hub error:', message);\r\n      if (this.eventHandlers.onError) {\r\n        this.eventHandlers.onError(message);\r\n      }\r\n    });\r\n  }\r\n\r\n  async registerConnection(userId, deviceId) {\r\n    console.log('Registering connection for userId:', userId, 'deviceId:', deviceId);\r\n    try {\r\n      await this.connection.invoke('RegisterConnection', userId, deviceId);\r\n      console.log('Connection registered successfully');\r\n    } catch (error) {\r\n      console.error('Error registering connection:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async sendMessage(userId, deviceId, messageContent) {\r\n    await this.ensureConnection();\r\n    return this.connection.invoke('SendMessage', userId, deviceId, messageContent);\r\n  }\r\n\r\n  async sendFileMetadata(userId, deviceId, fileMetadata) {\r\n    await this.ensureConnection();\r\n    return this.connection.invoke('SendFileMetadata', userId, deviceId, fileMetadata);\r\n  }\r\n\r\n  async sendFileChunk(userId, deviceId, fileId, chunk, chunkIndex, totalChunks) {\r\n    await this.ensureConnection();\r\n    return this.connection.invoke('SendFileChunk', userId, deviceId, fileId, chunk, chunkIndex, totalChunks);\r\n  }\r\n\r\n  async ensureConnection() {\r\n    if (!this.connection || this.connection.state !== signalR.HubConnectionState.Connected) {\r\n      throw new Error('SignalR connection not established. Call startConnection first.');\r\n    }\r\n  }\r\n\r\n  on(eventName, callback) {\r\n    if (this.eventHandlers.hasOwnProperty(eventName)) {\r\n      this.eventHandlers[eventName] = callback;\r\n    } else {\r\n      console.warn(`Unknown event name: ${eventName}`);\r\n    }\r\n  }\r\n\r\n  stopConnection() {\r\n    if (this.connection) {\r\n      this.connection.stop();\r\n      this.connection = null;\r\n      this.connectionPromise = null;\r\n    }\r\n  }\r\n}\r\n\r\n// 创建实例并导出，避免匿名默认导出\r\nconst signalRService = new SignalRService();\r\nexport default signalRService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}