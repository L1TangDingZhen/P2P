{"ast":null,"code":"import * as signalR from '@microsoft/signalr';\nclass SignalRService {\n  constructor() {\n    this.connection = null;\n    this.connectionPromise = null;\n    this.eventHandlers = {\n      onReceiveMessage: null,\n      onReceiveFileMetadata: null,\n      onReceiveFileChunk: null,\n      onFileTransferComplete: null,\n      onDeviceStatusChanged: null,\n      onOnlineDevices: null,\n      onError: null\n    };\n  }\n  startConnection(userId, deviceId) {\n    if (this.connectionPromise) {\n      return this.connectionPromise;\n    }\n    this.connection = new signalR.HubConnectionBuilder().withUrl('http://localhost:5235/p2phub').withAutomaticReconnect().configureLogging(signalR.LogLevel.Information).build();\n    this.setupEventHandlers();\n    this.connectionPromise = this.connection.start().then(() => {\n      console.log('SignalR connected!');\n      return this.registerConnection(userId, deviceId);\n    }).catch(err => {\n      console.error('SignalR connection error:', err);\n      this.connectionPromise = null;\n      throw err;\n    });\n    return this.connectionPromise;\n  }\n  setupEventHandlers() {\n    this.connection.on('ReceiveMessage', message => {\n      if (this.eventHandlers.onReceiveMessage) {\n        this.eventHandlers.onReceiveMessage(message);\n      }\n    });\n    this.connection.on('ReceiveFileMetadata', message => {\n      if (this.eventHandlers.onReceiveFileMetadata) {\n        this.eventHandlers.onReceiveFileMetadata(message);\n      }\n    });\n    this.connection.on('ReceiveFileChunk', (senderDeviceId, fileChunk) => {\n      if (this.eventHandlers.onReceiveFileChunk) {\n        this.eventHandlers.onReceiveFileChunk(senderDeviceId, fileChunk);\n      }\n    });\n    this.connection.on('FileTransferComplete', fileId => {\n      if (this.eventHandlers.onFileTransferComplete) {\n        this.eventHandlers.onFileTransferComplete(fileId);\n      }\n    });\n    this.connection.on('DeviceStatusChanged', (deviceId, isOnline) => {\n      if (this.eventHandlers.onDeviceStatusChanged) {\n        this.eventHandlers.onDeviceStatusChanged(deviceId, isOnline);\n      }\n    });\n    this.connection.on('OnlineDevices', devices => {\n      if (this.eventHandlers.onOnlineDevices) {\n        this.eventHandlers.onOnlineDevices(devices);\n      }\n    });\n    this.connection.on('Error', message => {\n      console.error('Hub error:', message);\n      if (this.eventHandlers.onError) {\n        this.eventHandlers.onError(message);\n      }\n    });\n  }\n  registerConnection(userId, deviceId) {\n    return this.connection.invoke('RegisterConnection', userId, deviceId);\n  }\n  async sendMessage(userId, deviceId, messageContent) {\n    await this.ensureConnection();\n    return this.connection.invoke('SendMessage', userId, deviceId, messageContent);\n  }\n  async sendFileMetadata(userId, deviceId, fileMetadata) {\n    await this.ensureConnection();\n    return this.connection.invoke('SendFileMetadata', userId, deviceId, fileMetadata);\n  }\n  async sendFileChunk(userId, deviceId, fileId, chunk, chunkIndex, totalChunks) {\n    await this.ensureConnection();\n    return this.connection.invoke('SendFileChunk', userId, deviceId, fileId, chunk, chunkIndex, totalChunks);\n  }\n  async ensureConnection() {\n    if (!this.connection || this.connection.state !== signalR.HubConnectionState.Connected) {\n      throw new Error('SignalR connection not established. Call startConnection first.');\n    }\n  }\n  on(eventName, callback) {\n    if (this.eventHandlers.hasOwnProperty(eventName)) {\n      this.eventHandlers[eventName] = callback;\n    } else {\n      console.warn(`Unknown event name: ${eventName}`);\n    }\n  }\n  stopConnection() {\n    if (this.connection) {\n      this.connection.stop();\n      this.connection = null;\n      this.connectionPromise = null;\n    }\n  }\n}\nexport default new SignalRService();","map":{"version":3,"names":["signalR","SignalRService","constructor","connection","connectionPromise","eventHandlers","onReceiveMessage","onReceiveFileMetadata","onReceiveFileChunk","onFileTransferComplete","onDeviceStatusChanged","onOnlineDevices","onError","startConnection","userId","deviceId","HubConnectionBuilder","withUrl","withAutomaticReconnect","configureLogging","LogLevel","Information","build","setupEventHandlers","start","then","console","log","registerConnection","catch","err","error","on","message","senderDeviceId","fileChunk","fileId","isOnline","devices","invoke","sendMessage","messageContent","ensureConnection","sendFileMetadata","fileMetadata","sendFileChunk","chunk","chunkIndex","totalChunks","state","HubConnectionState","Connected","Error","eventName","callback","hasOwnProperty","warn","stopConnection","stop"],"sources":["C:/Users/11427/Desktop/P2P/p2p-client/src/services/SignalRService.js"],"sourcesContent":["import * as signalR from '@microsoft/signalr';\r\n\r\nclass SignalRService {\r\n  constructor() {\r\n    this.connection = null;\r\n    this.connectionPromise = null;\r\n    this.eventHandlers = {\r\n      onReceiveMessage: null,\r\n      onReceiveFileMetadata: null,\r\n      onReceiveFileChunk: null,\r\n      onFileTransferComplete: null,\r\n      onDeviceStatusChanged: null,\r\n      onOnlineDevices: null,\r\n      onError: null\r\n    };\r\n  }\r\n\r\n  startConnection(userId, deviceId) {\r\n    if (this.connectionPromise) {\r\n      return this.connectionPromise;\r\n    }\r\n\r\n    this.connection = new signalR.HubConnectionBuilder()\r\n      .withUrl('http://localhost:5235/p2phub')\r\n      .withAutomaticReconnect()\r\n      .configureLogging(signalR.LogLevel.Information)\r\n      .build();\r\n\r\n    this.setupEventHandlers();\r\n\r\n    this.connectionPromise = this.connection.start()\r\n      .then(() => {\r\n        console.log('SignalR connected!');\r\n        return this.registerConnection(userId, deviceId);\r\n      })\r\n      .catch(err => {\r\n        console.error('SignalR connection error:', err);\r\n        this.connectionPromise = null;\r\n        throw err;\r\n      });\r\n\r\n    return this.connectionPromise;\r\n  }\r\n\r\n  setupEventHandlers() {\r\n    this.connection.on('ReceiveMessage', message => {\r\n      if (this.eventHandlers.onReceiveMessage) {\r\n        this.eventHandlers.onReceiveMessage(message);\r\n      }\r\n    });\r\n\r\n    this.connection.on('ReceiveFileMetadata', message => {\r\n      if (this.eventHandlers.onReceiveFileMetadata) {\r\n        this.eventHandlers.onReceiveFileMetadata(message);\r\n      }\r\n    });\r\n\r\n    this.connection.on('ReceiveFileChunk', (senderDeviceId, fileChunk) => {\r\n      if (this.eventHandlers.onReceiveFileChunk) {\r\n        this.eventHandlers.onReceiveFileChunk(senderDeviceId, fileChunk);\r\n      }\r\n    });\r\n\r\n    this.connection.on('FileTransferComplete', fileId => {\r\n      if (this.eventHandlers.onFileTransferComplete) {\r\n        this.eventHandlers.onFileTransferComplete(fileId);\r\n      }\r\n    });\r\n\r\n    this.connection.on('DeviceStatusChanged', (deviceId, isOnline) => {\r\n      if (this.eventHandlers.onDeviceStatusChanged) {\r\n        this.eventHandlers.onDeviceStatusChanged(deviceId, isOnline);\r\n      }\r\n    });\r\n\r\n    this.connection.on('OnlineDevices', devices => {\r\n      if (this.eventHandlers.onOnlineDevices) {\r\n        this.eventHandlers.onOnlineDevices(devices);\r\n      }\r\n    });\r\n\r\n    this.connection.on('Error', message => {\r\n      console.error('Hub error:', message);\r\n      if (this.eventHandlers.onError) {\r\n        this.eventHandlers.onError(message);\r\n      }\r\n    });\r\n  }\r\n\r\n  registerConnection(userId, deviceId) {\r\n    return this.connection.invoke('RegisterConnection', userId, deviceId);\r\n  }\r\n\r\n  async sendMessage(userId, deviceId, messageContent) {\r\n    await this.ensureConnection();\r\n    return this.connection.invoke('SendMessage', userId, deviceId, messageContent);\r\n  }\r\n\r\n  async sendFileMetadata(userId, deviceId, fileMetadata) {\r\n    await this.ensureConnection();\r\n    return this.connection.invoke('SendFileMetadata', userId, deviceId, fileMetadata);\r\n  }\r\n\r\n  async sendFileChunk(userId, deviceId, fileId, chunk, chunkIndex, totalChunks) {\r\n    await this.ensureConnection();\r\n    return this.connection.invoke('SendFileChunk', userId, deviceId, fileId, chunk, chunkIndex, totalChunks);\r\n  }\r\n\r\n  async ensureConnection() {\r\n    if (!this.connection || this.connection.state !== signalR.HubConnectionState.Connected) {\r\n      throw new Error('SignalR connection not established. Call startConnection first.');\r\n    }\r\n  }\r\n\r\n  on(eventName, callback) {\r\n    if (this.eventHandlers.hasOwnProperty(eventName)) {\r\n      this.eventHandlers[eventName] = callback;\r\n    } else {\r\n      console.warn(`Unknown event name: ${eventName}`);\r\n    }\r\n  }\r\n\r\n  stopConnection() {\r\n    if (this.connection) {\r\n      this.connection.stop();\r\n      this.connection = null;\r\n      this.connectionPromise = null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new SignalRService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}