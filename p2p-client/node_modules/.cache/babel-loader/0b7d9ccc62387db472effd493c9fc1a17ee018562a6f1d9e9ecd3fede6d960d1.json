{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\11427\\\\Desktop\\\\P2P\\\\p2p-client\\\\src\\\\components\\\\ConnectionStatus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Badge } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectionStatus = ({\n  isConnected\n}) => {\n  _s();\n  const [serverStatus, setServerStatus] = useState('unknown');\n  const [lastChecked, setLastChecked] = useState(null);\n\n  // 检查服务器状态\n  const checkServerStatus = async () => {\n    try {\n      // 使用环境变量或默认值作为API基础URL\n      const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5235';\n      const response = await fetch(`${apiUrl}/api/connectionstatus/health`);\n      if (response.ok) {\n        await response.json(); // 消费响应体但不保存变量\n        setServerStatus('online');\n        setLastChecked(new Date());\n        return true;\n      } else {\n        setServerStatus('offline');\n        setLastChecked(new Date());\n        return false;\n      }\n    } catch (error) {\n      console.error('Server health check failed:', error);\n      setServerStatus('offline');\n      setLastChecked(new Date());\n      return false;\n    }\n  };\n  useEffect(() => {\n    // 初始检查\n    checkServerStatus();\n\n    // 每60秒检查一次\n    const interval = setInterval(() => {\n      checkServerStatus();\n    }, 60000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-2 mb-3 d-flex align-items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Server: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), serverStatus === 'online' ? /*#__PURE__*/_jsxDEV(Badge, {\n        bg: \"success\",\n        children: \"Online\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this) : serverStatus === 'offline' ? /*#__PURE__*/_jsxDEV(Badge, {\n        bg: \"danger\",\n        children: \"Offline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Badge, {\n        bg: \"secondary\",\n        children: \"Checking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ms-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Connection: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), isConnected ? /*#__PURE__*/_jsxDEV(Badge, {\n        bg: \"success\",\n        children: \"Connected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Badge, {\n        bg: \"warning\",\n        children: \"Disconnected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), lastChecked && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ms-auto text-muted small\",\n      children: [\"Last checked: \", lastChecked.toLocaleTimeString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(ConnectionStatus, \"JdUTiBYtrLedV7nukYdZ5X+2lM0=\");\n_c = ConnectionStatus;\nexport default ConnectionStatus;\nvar _c;\n$RefreshReg$(_c, \"ConnectionStatus\");","map":{"version":3,"names":["React","useState","useEffect","Badge","jsxDEV","_jsxDEV","ConnectionStatus","isConnected","_s","serverStatus","setServerStatus","lastChecked","setLastChecked","checkServerStatus","apiUrl","process","env","REACT_APP_API_URL","response","fetch","ok","json","Date","error","console","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","bg","toLocaleTimeString","_c","$RefreshReg$"],"sources":["C:/Users/11427/Desktop/P2P/p2p-client/src/components/ConnectionStatus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Badge } from 'react-bootstrap';\r\n\r\nconst ConnectionStatus = ({ isConnected }) => {\r\n  const [serverStatus, setServerStatus] = useState('unknown');\r\n  const [lastChecked, setLastChecked] = useState(null);\r\n\r\n  // 检查服务器状态\r\n  const checkServerStatus = async () => {\r\n    try {\r\n      // 使用环境变量或默认值作为API基础URL\r\n      const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5235';\r\n      const response = await fetch(`${apiUrl}/api/connectionstatus/health`);\r\n      if (response.ok) {\r\n        await response.json(); // 消费响应体但不保存变量\r\n        setServerStatus('online');\r\n        setLastChecked(new Date());\r\n        return true;\r\n      } else {\r\n        setServerStatus('offline');\r\n        setLastChecked(new Date());\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Server health check failed:', error);\r\n      setServerStatus('offline');\r\n      setLastChecked(new Date());\r\n      return false;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // 初始检查\r\n    checkServerStatus();\r\n    \r\n    // 每60秒检查一次\r\n    const interval = setInterval(() => {\r\n      checkServerStatus();\r\n    }, 60000);\r\n    \r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"mt-2 mb-3 d-flex align-items-center\">\r\n      <div>\r\n        <span>Server: </span>\r\n        {serverStatus === 'online' ? (\r\n          <Badge bg=\"success\">Online</Badge>\r\n        ) : serverStatus === 'offline' ? (\r\n          <Badge bg=\"danger\">Offline</Badge>\r\n        ) : (\r\n          <Badge bg=\"secondary\">Checking...</Badge>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"ms-3\">\r\n        <span>Connection: </span>\r\n        {isConnected ? (\r\n          <Badge bg=\"success\">Connected</Badge>\r\n        ) : (\r\n          <Badge bg=\"warning\">Disconnected</Badge>\r\n        )}\r\n      </div>\r\n      \r\n      {lastChecked && (\r\n        <div className=\"ms-auto text-muted small\">\r\n          Last checked: {lastChecked.toLocaleTimeString()}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConnectionStatus;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}