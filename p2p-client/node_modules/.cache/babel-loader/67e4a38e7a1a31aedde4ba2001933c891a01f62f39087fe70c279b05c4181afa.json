{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\11427\\\\Desktop\\\\P2P\\\\p2p-client\\\\src\\\\components\\\\FileTransferPanel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Form, Button, ProgressBar, Alert } from 'react-bootstrap';\nimport SignalRService from '../services/SignalRService';\n\n// 辅助函数：将ArrayBuffer转换为Base64字符串\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction arrayBufferToBase64(buffer) {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  const len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return window.btoa(binary);\n}\n\n// 辅助函数：将Base64字符串转换回ArrayBuffer\nfunction base64ToArrayBuffer(base64) {\n  const binaryString = window.atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\nconst FileTransferPanel = ({\n  userId,\n  deviceId\n}) => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [error, setError] = useState('');\n\n  // For incoming transfers\n  const [incomingFiles, setIncomingFiles] = useState({});\n  const [completedFiles, setCompletedFiles] = useState([]);\n  const processedFileIdsRef = useRef(new Set());\n\n  // Constants for file transfer\n  const CHUNK_SIZE = 50 * 1024; // 50 KB chunks\n\n  useEffect(() => {\n    // 在 useEffect 内部定义事件处理函数，避免依赖项问题\n    const handleReceiveFileMetadata = message => {\n      const {\n        fileMetadata\n      } = message;\n\n      // Initialize data structures for the incoming file\n      setIncomingFiles(prev => ({\n        ...prev,\n        [fileMetadata.fileId]: {\n          ...fileMetadata,\n          receivedChunks: {},\n          totalChunks: 0,\n          receivedSize: 0,\n          progress: 0,\n          sender: message.senderDeviceId\n        }\n      }));\n    };\n    const processCompletedFile = fileId => {\n      setIncomingFiles(prev => {\n        if (!prev[fileId]) return prev;\n        const file = prev[fileId];\n\n        // 组装文件块并创建下载URL\n        setCompletedFiles(prevCompleted => {\n          // 检查文件是否已存在于完成列表中\n          const exists = prevCompleted.some(f => f.fileId === fileId);\n          if (exists) {\n            console.log('File already in completed list, skipping duplicate:', fileId);\n            return prevCompleted;\n          }\n\n          // 组装文件块\n          const chunks = Object.entries(file.receivedChunks).sort(([a], [b]) => parseInt(a) - parseInt(b)).map(([_, chunk]) => chunk);\n\n          // 创建Blob\n          const blob = new Blob(chunks, {\n            type: file.contentType || 'application/octet-stream'\n          });\n\n          // 创建下载URL\n          const url = URL.createObjectURL(blob);\n\n          // 添加到已完成文件列表\n          return [...prevCompleted, {\n            fileId,\n            fileName: file.fileName,\n            url,\n            size: file.fileSize,\n            sender: file.sender\n          }];\n        });\n\n        // 从传输中文件移除\n        const newIncomingFiles = {\n          ...prev\n        };\n        delete newIncomingFiles[fileId];\n        return newIncomingFiles;\n      });\n    };\n    const handleReceiveFileChunk = (senderDeviceId, fileChunk) => {\n      const {\n        fileId,\n        chunkIndex,\n        totalChunks,\n        data\n      } = fileChunk;\n\n      // 如果数据是Base64字符串，转换回二进制格式\n      const binaryData = typeof data === 'string' ? new Uint8Array(base64ToArrayBuffer(data)) : data;\n      setIncomingFiles(prev => {\n        // If we don't have this file initialized, ignore the chunk\n        if (!prev[fileId]) return prev;\n\n        // Store the chunk\n        const file = prev[fileId];\n        const newReceivedChunks = {\n          ...file.receivedChunks,\n          [chunkIndex]: binaryData\n        };\n        const receivedChunksCount = Object.keys(newReceivedChunks).length;\n        const progress = Math.round(receivedChunksCount / totalChunks * 100);\n\n        // Calculate received size\n        let receivedSize = 0;\n        Object.values(newReceivedChunks).forEach(chunk => {\n          receivedSize += chunk.length;\n        });\n        return {\n          ...prev,\n          [fileId]: {\n            ...file,\n            receivedChunks: newReceivedChunks,\n            totalChunks,\n            receivedSize,\n            progress\n          }\n        };\n      });\n    };\n    const handleFileTransferComplete = fileId => {\n      // 使用函数式更新来检查和更新processedFileIds\n      setProcessedFileIds(prevIds => {\n        // 如果已经处理过，跳过处理\n        if (prevIds.has(fileId)) {\n          console.log('File already processed, skipping:', fileId);\n          return prevIds; // 返回原来的Set，不做修改\n        }\n\n        // 创建新的Set（保持不可变性）\n        const newIds = new Set(prevIds);\n        newIds.add(fileId);\n        console.log('Processing completed file:', fileId);\n\n        // 现在处理文件\n        processCompletedFile(fileId);\n        return newIds; // 返回更新后的Set\n      });\n    };\n\n    // Register event handlers for file transfer\n    SignalRService.on('onReceiveFileMetadata', handleReceiveFileMetadata);\n    SignalRService.on('onReceiveFileChunk', handleReceiveFileChunk);\n    SignalRService.on('onFileTransferComplete', handleFileTransferComplete);\n    return () => {\n      // Clean up event handlers\n      SignalRService.on('onReceiveFileMetadata', null);\n      SignalRService.on('onReceiveFileChunk', null);\n      SignalRService.on('onFileTransferComplete', null);\n    };\n  }, []); // 依赖项为空数组，只在组件挂载时执行一次\n\n  const handleFileChange = e => {\n    if (e.target.files.length > 0) {\n      setSelectedFile(e.target.files[0]);\n    }\n  };\n  const handleSendFile = async () => {\n    if (!selectedFile) {\n      setError('Please select a file');\n      return;\n    }\n    setIsUploading(true);\n    setError('');\n    setUploadProgress(0);\n    try {\n      // Send file metadata\n      const fileId = crypto.randomUUID();\n      const fileMetadata = {\n        fileId,\n        fileName: selectedFile.name,\n        fileSize: selectedFile.size,\n        contentType: selectedFile.type\n      };\n      await SignalRService.sendFileMetadata(userId, deviceId, fileMetadata);\n\n      // Split file into chunks and send each chunk\n      const totalChunks = Math.ceil(selectedFile.size / CHUNK_SIZE);\n      for (let i = 0; i < totalChunks; i++) {\n        const start = i * CHUNK_SIZE;\n        const end = Math.min(start + CHUNK_SIZE, selectedFile.size);\n        const chunk = selectedFile.slice(start, end);\n\n        // Convert the chunk to an array buffer\n        const arrayBuffer = await chunk.arrayBuffer();\n\n        // 将ArrayBuffer转换为Base64字符串，以避免二进制传输问题\n        const base64Data = arrayBufferToBase64(arrayBuffer);\n\n        // Send the chunk\n        await SignalRService.sendFileChunk(userId, deviceId, fileId, base64Data, i, totalChunks);\n\n        // Update progress\n        const progress = Math.round((i + 1) / totalChunks * 100);\n        setUploadProgress(progress);\n      }\n      setSelectedFile(null);\n      setUploadProgress(0);\n      document.getElementById('file-input').value = null;\n    } catch (error) {\n      console.error('Error sending file:', error);\n      setError('Error sending file: ' + error.message);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n  const formatFileSize = bytes => {\n    if (bytes < 1024) return bytes + ' bytes';\n    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(2) + ' KB';\n    return (bytes / (1024 * 1024)).toFixed(2) + ' MB';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"File Transfer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      onClose: () => setError(''),\n      dismissible: true,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Select File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        id: \"file-input\",\n        type: \"file\",\n        onChange: handleFileChange,\n        disabled: isUploading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      onClick: handleSendFile,\n      disabled: !selectedFile || isUploading,\n      className: \"mb-3\",\n      children: isUploading ? 'Sending...' : 'Send File'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), isUploading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Uploading: \", selectedFile.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        now: uploadProgress,\n        label: `${uploadProgress}%`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"small mt-1\",\n        children: [formatFileSize(Math.floor(selectedFile.size * uploadProgress / 100)), \" of \", formatFileSize(selectedFile.size)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }, this), Object.entries(incomingFiles).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Incoming Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this), Object.entries(incomingFiles).map(([fileId, file]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border rounded p-2 mb-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mb-1\",\n          children: [\"Receiving: \", file.fileName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n          now: file.progress,\n          label: `${file.progress}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"small mt-1\",\n          children: [formatFileSize(file.receivedSize), \" of \", formatFileSize(file.fileSize)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 15\n        }, this)]\n      }, fileId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }, this), completedFiles.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Completed Transfers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this), completedFiles.map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border rounded p-2 mb-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mb-1\",\n          children: [file.fileName, \" (\", formatFileSize(file.size), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: file.url,\n          download: file.fileName,\n          className: \"btn btn-sm btn-success\",\n          children: \"Download\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 15\n        }, this)]\n      }, file.fileId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n};\n_s(FileTransferPanel, \"Ez53AI1TUzbRJiukD+CWkbdCm9s=\");\n_c = FileTransferPanel;\nexport default FileTransferPanel;\nvar _c;\n$RefreshReg$(_c, \"FileTransferPanel\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Form","Button","ProgressBar","Alert","SignalRService","jsxDEV","_jsxDEV","arrayBufferToBase64","buffer","binary","bytes","Uint8Array","len","byteLength","i","String","fromCharCode","window","btoa","base64ToArrayBuffer","base64","binaryString","atob","length","charCodeAt","FileTransferPanel","userId","deviceId","_s","selectedFile","setSelectedFile","isUploading","setIsUploading","uploadProgress","setUploadProgress","error","setError","incomingFiles","setIncomingFiles","completedFiles","setCompletedFiles","processedFileIdsRef","Set","CHUNK_SIZE","handleReceiveFileMetadata","message","fileMetadata","prev","fileId","receivedChunks","totalChunks","receivedSize","progress","sender","senderDeviceId","processCompletedFile","file","prevCompleted","exists","some","f","console","log","chunks","Object","entries","sort","a","b","parseInt","map","_","chunk","blob","Blob","type","contentType","url","URL","createObjectURL","fileName","size","fileSize","newIncomingFiles","handleReceiveFileChunk","fileChunk","chunkIndex","data","binaryData","newReceivedChunks","receivedChunksCount","keys","Math","round","values","forEach","handleFileTransferComplete","setProcessedFileIds","prevIds","has","newIds","add","on","handleFileChange","e","target","files","handleSendFile","crypto","randomUUID","name","sendFileMetadata","ceil","start","end","min","slice","arrayBuffer","base64Data","sendFileChunk","document","getElementById","value","formatFileSize","toFixed","children","_jsxFileName","lineNumber","columnNumber","variant","onClose","dismissible","Group","className","Label","Control","id","onChange","disabled","onClick","now","label","floor","href","download","_c","$RefreshReg$"],"sources":["C:/Users/11427/Desktop/P2P/p2p-client/src/components/FileTransferPanel.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Form, Button, ProgressBar, Alert } from 'react-bootstrap';\r\nimport SignalRService from '../services/SignalRService';\r\n\r\n// 辅助函数：将ArrayBuffer转换为Base64字符串\r\nfunction arrayBufferToBase64(buffer) {\r\n  let binary = '';\r\n  const bytes = new Uint8Array(buffer);\r\n  const len = bytes.byteLength;\r\n  for (let i = 0; i < len; i++) {\r\n    binary += String.fromCharCode(bytes[i]);\r\n  }\r\n  return window.btoa(binary);\r\n}\r\n\r\n// 辅助函数：将Base64字符串转换回ArrayBuffer\r\nfunction base64ToArrayBuffer(base64) {\r\n  const binaryString = window.atob(base64);\r\n  const len = binaryString.length;\r\n  const bytes = new Uint8Array(len);\r\n  for (let i = 0; i < len; i++) {\r\n    bytes[i] = binaryString.charCodeAt(i);\r\n  }\r\n  return bytes.buffer;\r\n}\r\n\r\nconst FileTransferPanel = ({ userId, deviceId }) => {\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n  const [error, setError] = useState('');\r\n  \r\n  // For incoming transfers\r\n  const [incomingFiles, setIncomingFiles] = useState({});\r\n  const [completedFiles, setCompletedFiles] = useState([]);\r\n  const processedFileIdsRef = useRef(new Set());\r\n\r\n  // Constants for file transfer\r\n  const CHUNK_SIZE = 50 * 1024; // 50 KB chunks\r\n\r\n  useEffect(() => {\r\n    // 在 useEffect 内部定义事件处理函数，避免依赖项问题\r\n    const handleReceiveFileMetadata = (message) => {\r\n      const { fileMetadata } = message;\r\n      \r\n      // Initialize data structures for the incoming file\r\n      setIncomingFiles(prev => ({\r\n        ...prev,\r\n        [fileMetadata.fileId]: {\r\n          ...fileMetadata,\r\n          receivedChunks: {},\r\n          totalChunks: 0,\r\n          receivedSize: 0,\r\n          progress: 0,\r\n          sender: message.senderDeviceId\r\n        }\r\n      }));\r\n    };\r\n\r\n    const processCompletedFile = (fileId) => {\r\n      setIncomingFiles(prev => {\r\n        if (!prev[fileId]) return prev;\r\n    \r\n        const file = prev[fileId];\r\n        \r\n        // 组装文件块并创建下载URL\r\n        setCompletedFiles(prevCompleted => {\r\n          // 检查文件是否已存在于完成列表中\r\n          const exists = prevCompleted.some(f => f.fileId === fileId);\r\n          if (exists) {\r\n            console.log('File already in completed list, skipping duplicate:', fileId);\r\n            return prevCompleted;\r\n          }\r\n          \r\n          // 组装文件块\r\n          const chunks = Object.entries(file.receivedChunks)\r\n            .sort(([a], [b]) => parseInt(a) - parseInt(b))\r\n            .map(([_, chunk]) => chunk);\r\n          \r\n          // 创建Blob\r\n          const blob = new Blob(chunks, { type: file.contentType || 'application/octet-stream' });\r\n          \r\n          // 创建下载URL\r\n          const url = URL.createObjectURL(blob);\r\n          \r\n          // 添加到已完成文件列表\r\n          return [...prevCompleted, {\r\n            fileId,\r\n            fileName: file.fileName,\r\n            url,\r\n            size: file.fileSize,\r\n            sender: file.sender\r\n          }];\r\n        });\r\n        \r\n        // 从传输中文件移除\r\n        const newIncomingFiles = { ...prev };\r\n        delete newIncomingFiles[fileId];\r\n        return newIncomingFiles;\r\n      });\r\n    };\r\n\r\n    const handleReceiveFileChunk = (senderDeviceId, fileChunk) => {\r\n      const { fileId, chunkIndex, totalChunks, data } = fileChunk;\r\n      \r\n      // 如果数据是Base64字符串，转换回二进制格式\r\n      const binaryData = typeof data === 'string' ? \r\n        new Uint8Array(base64ToArrayBuffer(data)) : \r\n        data;\r\n      \r\n      setIncomingFiles(prev => {\r\n        // If we don't have this file initialized, ignore the chunk\r\n        if (!prev[fileId]) return prev;\r\n\r\n        // Store the chunk\r\n        const file = prev[fileId];\r\n        const newReceivedChunks = { ...file.receivedChunks, [chunkIndex]: binaryData };\r\n        const receivedChunksCount = Object.keys(newReceivedChunks).length;\r\n        const progress = Math.round((receivedChunksCount / totalChunks) * 100);\r\n        \r\n        // Calculate received size\r\n        let receivedSize = 0;\r\n        Object.values(newReceivedChunks).forEach(chunk => {\r\n          receivedSize += chunk.length;\r\n        });\r\n\r\n        return {\r\n          ...prev,\r\n          [fileId]: {\r\n            ...file,\r\n            receivedChunks: newReceivedChunks,\r\n            totalChunks,\r\n            receivedSize,\r\n            progress\r\n          }\r\n        };\r\n      });\r\n    };\r\n\r\n    const handleFileTransferComplete = (fileId) => {\r\n      // 使用函数式更新来检查和更新processedFileIds\r\n      setProcessedFileIds(prevIds => {\r\n        // 如果已经处理过，跳过处理\r\n        if (prevIds.has(fileId)) {\r\n          console.log('File already processed, skipping:', fileId);\r\n          return prevIds; // 返回原来的Set，不做修改\r\n        }\r\n        \r\n        // 创建新的Set（保持不可变性）\r\n        const newIds = new Set(prevIds);\r\n        newIds.add(fileId);\r\n        console.log('Processing completed file:', fileId);\r\n        \r\n        // 现在处理文件\r\n        processCompletedFile(fileId);\r\n        \r\n        return newIds; // 返回更新后的Set\r\n      });\r\n    };\r\n\r\n\r\n\r\n    // Register event handlers for file transfer\r\n    SignalRService.on('onReceiveFileMetadata', handleReceiveFileMetadata);\r\n    SignalRService.on('onReceiveFileChunk', handleReceiveFileChunk);\r\n    SignalRService.on('onFileTransferComplete', handleFileTransferComplete);\r\n\r\n    return () => {\r\n      // Clean up event handlers\r\n      SignalRService.on('onReceiveFileMetadata', null);\r\n      SignalRService.on('onReceiveFileChunk', null);\r\n      SignalRService.on('onFileTransferComplete', null);\r\n    };\r\n  }, []); // 依赖项为空数组，只在组件挂载时执行一次\r\n\r\n  const handleFileChange = (e) => {\r\n    if (e.target.files.length > 0) {\r\n      setSelectedFile(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleSendFile = async () => {\r\n    if (!selectedFile) {\r\n      setError('Please select a file');\r\n      return;\r\n    }\r\n\r\n    setIsUploading(true);\r\n    setError('');\r\n    setUploadProgress(0);\r\n\r\n    try {\r\n      // Send file metadata\r\n      const fileId = crypto.randomUUID();\r\n      const fileMetadata = {\r\n        fileId,\r\n        fileName: selectedFile.name,\r\n        fileSize: selectedFile.size,\r\n        contentType: selectedFile.type\r\n      };\r\n\r\n      await SignalRService.sendFileMetadata(userId, deviceId, fileMetadata);\r\n\r\n      // Split file into chunks and send each chunk\r\n      const totalChunks = Math.ceil(selectedFile.size / CHUNK_SIZE);\r\n      \r\n      for (let i = 0; i < totalChunks; i++) {\r\n        const start = i * CHUNK_SIZE;\r\n        const end = Math.min(start + CHUNK_SIZE, selectedFile.size);\r\n        const chunk = selectedFile.slice(start, end);\r\n        \r\n        // Convert the chunk to an array buffer\r\n        const arrayBuffer = await chunk.arrayBuffer();\r\n        \r\n        // 将ArrayBuffer转换为Base64字符串，以避免二进制传输问题\r\n        const base64Data = arrayBufferToBase64(arrayBuffer);\r\n        \r\n        // Send the chunk\r\n        await SignalRService.sendFileChunk(\r\n          userId, \r\n          deviceId, \r\n          fileId, \r\n          base64Data, \r\n          i, \r\n          totalChunks\r\n        );\r\n        \r\n        // Update progress\r\n        const progress = Math.round(((i + 1) / totalChunks) * 100);\r\n        setUploadProgress(progress);\r\n      }\r\n\r\n      setSelectedFile(null);\r\n      setUploadProgress(0);\r\n      document.getElementById('file-input').value = null;\r\n    } catch (error) {\r\n      console.error('Error sending file:', error);\r\n      setError('Error sending file: ' + error.message);\r\n    } finally {\r\n      setIsUploading(false);\r\n    }\r\n  };\r\n\r\n  const formatFileSize = (bytes) => {\r\n    if (bytes < 1024) return bytes + ' bytes';\r\n    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(2) + ' KB';\r\n    return (bytes / (1024 * 1024)).toFixed(2) + ' MB';\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h4>File Transfer</h4>\r\n      \r\n      {error && (\r\n        <Alert variant=\"danger\" onClose={() => setError('')} dismissible>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Form.Group className=\"mb-3\">\r\n        <Form.Label>Select File</Form.Label>\r\n        <Form.Control\r\n          id=\"file-input\"\r\n          type=\"file\"\r\n          onChange={handleFileChange}\r\n          disabled={isUploading}\r\n        />\r\n      </Form.Group>\r\n      \r\n      <Button \r\n        variant=\"primary\" \r\n        onClick={handleSendFile} \r\n        disabled={!selectedFile || isUploading}\r\n        className=\"mb-3\"\r\n      >\r\n        {isUploading ? 'Sending...' : 'Send File'}\r\n      </Button>\r\n      \r\n      {isUploading && (\r\n        <div className=\"mb-3\">\r\n          <p>Uploading: {selectedFile.name}</p>\r\n          <ProgressBar now={uploadProgress} label={`${uploadProgress}%`} />\r\n          <p className=\"small mt-1\">\r\n            {formatFileSize(Math.floor(selectedFile.size * uploadProgress / 100))} of {formatFileSize(selectedFile.size)}\r\n          </p>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Incoming file transfers */}\r\n      {Object.entries(incomingFiles).length > 0 && (\r\n        <div className=\"mt-4\">\r\n          <h5>Incoming Files</h5>\r\n          {Object.entries(incomingFiles).map(([fileId, file]) => (\r\n            <div key={fileId} className=\"border rounded p-2 mb-2\">\r\n              <p className=\"mb-1\">Receiving: {file.fileName}</p>\r\n              <ProgressBar now={file.progress} label={`${file.progress}%`} />\r\n              <p className=\"small mt-1\">\r\n                {formatFileSize(file.receivedSize)} of {formatFileSize(file.fileSize)}\r\n              </p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n      \r\n      {/* Completed file transfers */}\r\n      {completedFiles.length > 0 && (\r\n        <div className=\"mt-4\">\r\n          <h5>Completed Transfers</h5>\r\n          {completedFiles.map((file) => (\r\n            <div key={file.fileId} className=\"border rounded p-2 mb-2\">\r\n              <p className=\"mb-1\">{file.fileName} ({formatFileSize(file.size)})</p>\r\n              <a \r\n                href={file.url} \r\n                download={file.fileName}\r\n                className=\"btn btn-sm btn-success\"\r\n              >\r\n                Download\r\n              </a>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileTransferPanel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}