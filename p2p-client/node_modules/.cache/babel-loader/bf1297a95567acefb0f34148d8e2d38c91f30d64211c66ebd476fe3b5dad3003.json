{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\11427\\\\Desktop\\\\P2P\\\\p2p-client\\\\src\\\\components\\\\FileTransferPanel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Form, Button, ProgressBar, Alert } from 'react-bootstrap';\nimport SignalRService from '../services/SignalRService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileTransferPanel = ({\n  userId,\n  deviceId\n}) => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [error, setError] = useState('');\n\n  // For incoming transfers\n  const [incomingFiles, setIncomingFiles] = useState({});\n  const [completedFiles, setCompletedFiles] = useState([]);\n\n  // Constants for file transfer\n  const CHUNK_SIZE = 50 * 1024; // 50 KB chunks\n\n  useEffect(() => {\n    // Register event handlers for file transfer\n    SignalRService.on('onReceiveFileMetadata', handleReceiveFileMetadata);\n    SignalRService.on('onReceiveFileChunk', handleReceiveFileChunk);\n    SignalRService.on('onFileTransferComplete', handleFileTransferComplete);\n    return () => {\n      // Clean up event handlers\n      SignalRService.on('onReceiveFileMetadata', null);\n      SignalRService.on('onReceiveFileChunk', null);\n      SignalRService.on('onFileTransferComplete', null);\n    };\n  }, []);\n  const handleFileChange = e => {\n    if (e.target.files.length > 0) {\n      setSelectedFile(e.target.files[0]);\n    }\n  };\n  const handleSendFile = async () => {\n    if (!selectedFile) {\n      setError('Please select a file');\n      return;\n    }\n    setIsUploading(true);\n    setError('');\n    setUploadProgress(0);\n    try {\n      // Send file metadata\n      const fileId = crypto.randomUUID();\n      const fileMetadata = {\n        fileId,\n        fileName: selectedFile.name,\n        fileSize: selectedFile.size,\n        contentType: selectedFile.type\n      };\n      await SignalRService.sendFileMetadata(userId, deviceId, fileMetadata);\n\n      // Split file into chunks and send each chunk\n      const totalChunks = Math.ceil(selectedFile.size / CHUNK_SIZE);\n      for (let i = 0; i < totalChunks; i++) {\n        const start = i * CHUNK_SIZE;\n        const end = Math.min(start + CHUNK_SIZE, selectedFile.size);\n        const chunk = selectedFile.slice(start, end);\n\n        // Convert the chunk to an array buffer\n        const arrayBuffer = await chunk.arrayBuffer();\n\n        // 将ArrayBuffer转换为Base64字符串，以避免二进制传输问题\n        const base64Data = arrayBufferToBase64(arrayBuffer);\n\n        // Send the chunk\n        await SignalRService.sendFileChunk(userId, deviceId, fileId, base64Data, i, totalChunks);\n\n        // Update progress\n        const progress = Math.round((i + 1) / totalChunks * 100);\n        setUploadProgress(progress);\n      }\n      setSelectedFile(null);\n      setUploadProgress(0);\n      document.getElementById('file-input').value = null;\n    } catch (error) {\n      console.error('Error sending file:', error);\n      setError('Error sending file: ' + error.message);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n  const handleReceiveFileMetadata = message => {\n    const {\n      fileMetadata\n    } = message;\n\n    // Initialize data structures for the incoming file\n    setIncomingFiles(prev => ({\n      ...prev,\n      [fileMetadata.fileId]: {\n        ...fileMetadata,\n        receivedChunks: {},\n        totalChunks: 0,\n        receivedSize: 0,\n        progress: 0,\n        sender: message.senderDeviceId\n      }\n    }));\n  };\n  const handleReceiveFileChunk = (senderDeviceId, fileChunk) => {\n    const {\n      fileId,\n      chunkIndex,\n      totalChunks,\n      data\n    } = fileChunk;\n    setIncomingFiles(prev => {\n      // If we don't have this file initialized, ignore the chunk\n      if (!prev[fileId]) return prev;\n\n      // Store the chunk\n      const file = prev[fileId];\n      const newReceivedChunks = {\n        ...file.receivedChunks,\n        [chunkIndex]: data\n      };\n      const receivedChunksCount = Object.keys(newReceivedChunks).length;\n      const progress = Math.round(receivedChunksCount / totalChunks * 100);\n\n      // Calculate received size\n      let receivedSize = 0;\n      Object.values(newReceivedChunks).forEach(chunk => {\n        receivedSize += chunk.length;\n      });\n      return {\n        ...prev,\n        [fileId]: {\n          ...file,\n          receivedChunks: newReceivedChunks,\n          totalChunks,\n          receivedSize,\n          progress\n        }\n      };\n    });\n  };\n  const handleFileTransferComplete = fileId => {\n    setIncomingFiles(prev => {\n      if (!prev[fileId]) return prev;\n      const file = prev[fileId];\n\n      // Assemble the file from chunks\n      const chunks = Object.entries(file.receivedChunks).sort(([a], [b]) => parseInt(a) - parseInt(b)).map(([_, chunk]) => chunk);\n\n      // Create blob from chunks\n      const blob = new Blob(chunks, {\n        type: file.contentType || 'application/octet-stream'\n      });\n\n      // Create download URL\n      const url = URL.createObjectURL(blob);\n\n      // Add to completed files\n      setCompletedFiles(prev => [...prev, {\n        fileId,\n        fileName: file.fileName,\n        url,\n        size: file.fileSize,\n        sender: file.sender\n      }]);\n\n      // Remove from incoming files\n      const newIncomingFiles = {\n        ...prev\n      };\n      delete newIncomingFiles[fileId];\n      return newIncomingFiles;\n    });\n  };\n  const formatFileSize = bytes => {\n    if (bytes < 1024) return bytes + ' bytes';\n    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(2) + ' KB';\n    return (bytes / (1024 * 1024)).toFixed(2) + ' MB';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"File Transfer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      onClose: () => setError(''),\n      dismissible: true,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Select File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        id: \"file-input\",\n        type: \"file\",\n        onChange: handleFileChange,\n        disabled: isUploading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      onClick: handleSendFile,\n      disabled: !selectedFile || isUploading,\n      className: \"mb-3\",\n      children: isUploading ? 'Sending...' : 'Send File'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), isUploading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Uploading: \", selectedFile.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        now: uploadProgress,\n        label: `${uploadProgress}%`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"small mt-1\",\n        children: [formatFileSize(Math.floor(selectedFile.size * uploadProgress / 100)), \" of \", formatFileSize(selectedFile.size)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }, this), Object.entries(incomingFiles).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Incoming Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this), Object.entries(incomingFiles).map(([fileId, file]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border rounded p-2 mb-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mb-1\",\n          children: [\"Receiving: \", file.fileName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n          now: file.progress,\n          label: `${file.progress}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"small mt-1\",\n          children: [formatFileSize(file.receivedSize), \" of \", formatFileSize(file.fileSize)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 15\n        }, this)]\n      }, fileId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }, this), completedFiles.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Completed Transfers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this), completedFiles.map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border rounded p-2 mb-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mb-1\",\n          children: [file.fileName, \" (\", formatFileSize(file.size), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: file.url,\n          download: file.fileName,\n          className: \"btn btn-sm btn-success\",\n          children: \"Download\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 15\n        }, this)]\n      }, file.fileId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n};\n_s(FileTransferPanel, \"/XRe3i/9ZStpjBMV/NkO4Z1eekI=\");\n_c = FileTransferPanel;\nexport default FileTransferPanel;\nvar _c;\n$RefreshReg$(_c, \"FileTransferPanel\");","map":{"version":3,"names":["React","useState","useEffect","Form","Button","ProgressBar","Alert","SignalRService","jsxDEV","_jsxDEV","FileTransferPanel","userId","deviceId","_s","selectedFile","setSelectedFile","isUploading","setIsUploading","uploadProgress","setUploadProgress","error","setError","incomingFiles","setIncomingFiles","completedFiles","setCompletedFiles","CHUNK_SIZE","on","handleReceiveFileMetadata","handleReceiveFileChunk","handleFileTransferComplete","handleFileChange","e","target","files","length","handleSendFile","fileId","crypto","randomUUID","fileMetadata","fileName","name","fileSize","size","contentType","type","sendFileMetadata","totalChunks","Math","ceil","i","start","end","min","chunk","slice","arrayBuffer","base64Data","arrayBufferToBase64","sendFileChunk","progress","round","document","getElementById","value","console","message","prev","receivedChunks","receivedSize","sender","senderDeviceId","fileChunk","chunkIndex","data","file","newReceivedChunks","receivedChunksCount","Object","keys","values","forEach","chunks","entries","sort","a","b","parseInt","map","_","blob","Blob","url","URL","createObjectURL","newIncomingFiles","formatFileSize","bytes","toFixed","children","_jsxFileName","lineNumber","columnNumber","variant","onClose","dismissible","Group","className","Label","Control","id","onChange","disabled","onClick","now","label","floor","href","download","_c","$RefreshReg$"],"sources":["C:/Users/11427/Desktop/P2P/p2p-client/src/components/FileTransferPanel.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Form, Button, ProgressBar, Alert } from 'react-bootstrap';\r\nimport SignalRService from '../services/SignalRService';\r\n\r\nconst FileTransferPanel = ({ userId, deviceId }) => {\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n  const [error, setError] = useState('');\r\n  \r\n  // For incoming transfers\r\n  const [incomingFiles, setIncomingFiles] = useState({});\r\n  const [completedFiles, setCompletedFiles] = useState([]);\r\n\r\n  // Constants for file transfer\r\n  const CHUNK_SIZE = 50 * 1024; // 50 KB chunks\r\n\r\n  useEffect(() => {\r\n    // Register event handlers for file transfer\r\n    SignalRService.on('onReceiveFileMetadata', handleReceiveFileMetadata);\r\n    SignalRService.on('onReceiveFileChunk', handleReceiveFileChunk);\r\n    SignalRService.on('onFileTransferComplete', handleFileTransferComplete);\r\n\r\n    return () => {\r\n      // Clean up event handlers\r\n      SignalRService.on('onReceiveFileMetadata', null);\r\n      SignalRService.on('onReceiveFileChunk', null);\r\n      SignalRService.on('onFileTransferComplete', null);\r\n    };\r\n  }, []);\r\n\r\n  const handleFileChange = (e) => {\r\n    if (e.target.files.length > 0) {\r\n      setSelectedFile(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleSendFile = async () => {\r\n    if (!selectedFile) {\r\n      setError('Please select a file');\r\n      return;\r\n    }\r\n\r\n    setIsUploading(true);\r\n    setError('');\r\n    setUploadProgress(0);\r\n\r\n    try {\r\n      // Send file metadata\r\n      const fileId = crypto.randomUUID();\r\n      const fileMetadata = {\r\n        fileId,\r\n        fileName: selectedFile.name,\r\n        fileSize: selectedFile.size,\r\n        contentType: selectedFile.type\r\n      };\r\n\r\n      await SignalRService.sendFileMetadata(userId, deviceId, fileMetadata);\r\n\r\n      // Split file into chunks and send each chunk\r\n      const totalChunks = Math.ceil(selectedFile.size / CHUNK_SIZE);\r\n      \r\n      for (let i = 0; i < totalChunks; i++) {\r\n        const start = i * CHUNK_SIZE;\r\n        const end = Math.min(start + CHUNK_SIZE, selectedFile.size);\r\n        const chunk = selectedFile.slice(start, end);\r\n        \r\n        // Convert the chunk to an array buffer\r\n        const arrayBuffer = await chunk.arrayBuffer();\r\n        \r\n        // 将ArrayBuffer转换为Base64字符串，以避免二进制传输问题\r\n        const base64Data = arrayBufferToBase64(arrayBuffer);\r\n        \r\n        // Send the chunk\r\n        await SignalRService.sendFileChunk(\r\n          userId, \r\n          deviceId, \r\n          fileId, \r\n          base64Data, \r\n          i, \r\n          totalChunks\r\n        );\r\n        \r\n        // Update progress\r\n        const progress = Math.round(((i + 1) / totalChunks) * 100);\r\n        setUploadProgress(progress);\r\n      }\r\n\r\n      setSelectedFile(null);\r\n      setUploadProgress(0);\r\n      document.getElementById('file-input').value = null;\r\n    } catch (error) {\r\n      console.error('Error sending file:', error);\r\n      setError('Error sending file: ' + error.message);\r\n    } finally {\r\n      setIsUploading(false);\r\n    }\r\n  };\r\n\r\n  const handleReceiveFileMetadata = (message) => {\r\n    const { fileMetadata } = message;\r\n    \r\n    // Initialize data structures for the incoming file\r\n    setIncomingFiles(prev => ({\r\n      ...prev,\r\n      [fileMetadata.fileId]: {\r\n        ...fileMetadata,\r\n        receivedChunks: {},\r\n        totalChunks: 0,\r\n        receivedSize: 0,\r\n        progress: 0,\r\n        sender: message.senderDeviceId\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleReceiveFileChunk = (senderDeviceId, fileChunk) => {\r\n    const { fileId, chunkIndex, totalChunks, data } = fileChunk;\r\n    \r\n    setIncomingFiles(prev => {\r\n      // If we don't have this file initialized, ignore the chunk\r\n      if (!prev[fileId]) return prev;\r\n\r\n      // Store the chunk\r\n      const file = prev[fileId];\r\n      const newReceivedChunks = { ...file.receivedChunks, [chunkIndex]: data };\r\n      const receivedChunksCount = Object.keys(newReceivedChunks).length;\r\n      const progress = Math.round((receivedChunksCount / totalChunks) * 100);\r\n      \r\n      // Calculate received size\r\n      let receivedSize = 0;\r\n      Object.values(newReceivedChunks).forEach(chunk => {\r\n        receivedSize += chunk.length;\r\n      });\r\n\r\n      return {\r\n        ...prev,\r\n        [fileId]: {\r\n          ...file,\r\n          receivedChunks: newReceivedChunks,\r\n          totalChunks,\r\n          receivedSize,\r\n          progress\r\n        }\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleFileTransferComplete = (fileId) => {\r\n    setIncomingFiles(prev => {\r\n      if (!prev[fileId]) return prev;\r\n\r\n      const file = prev[fileId];\r\n      \r\n      // Assemble the file from chunks\r\n      const chunks = Object.entries(file.receivedChunks)\r\n        .sort(([a], [b]) => parseInt(a) - parseInt(b))\r\n        .map(([_, chunk]) => chunk);\r\n      \r\n      // Create blob from chunks\r\n      const blob = new Blob(chunks, { type: file.contentType || 'application/octet-stream' });\r\n      \r\n      // Create download URL\r\n      const url = URL.createObjectURL(blob);\r\n      \r\n      // Add to completed files\r\n      setCompletedFiles(prev => [...prev, {\r\n        fileId,\r\n        fileName: file.fileName,\r\n        url,\r\n        size: file.fileSize,\r\n        sender: file.sender\r\n      }]);\r\n      \r\n      // Remove from incoming files\r\n      const newIncomingFiles = { ...prev };\r\n      delete newIncomingFiles[fileId];\r\n      return newIncomingFiles;\r\n    });\r\n  };\r\n\r\n  const formatFileSize = (bytes) => {\r\n    if (bytes < 1024) return bytes + ' bytes';\r\n    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(2) + ' KB';\r\n    return (bytes / (1024 * 1024)).toFixed(2) + ' MB';\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h4>File Transfer</h4>\r\n      \r\n      {error && (\r\n        <Alert variant=\"danger\" onClose={() => setError('')} dismissible>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Form.Group className=\"mb-3\">\r\n        <Form.Label>Select File</Form.Label>\r\n        <Form.Control\r\n          id=\"file-input\"\r\n          type=\"file\"\r\n          onChange={handleFileChange}\r\n          disabled={isUploading}\r\n        />\r\n      </Form.Group>\r\n      \r\n      <Button \r\n        variant=\"primary\" \r\n        onClick={handleSendFile} \r\n        disabled={!selectedFile || isUploading}\r\n        className=\"mb-3\"\r\n      >\r\n        {isUploading ? 'Sending...' : 'Send File'}\r\n      </Button>\r\n      \r\n      {isUploading && (\r\n        <div className=\"mb-3\">\r\n          <p>Uploading: {selectedFile.name}</p>\r\n          <ProgressBar now={uploadProgress} label={`${uploadProgress}%`} />\r\n          <p className=\"small mt-1\">\r\n            {formatFileSize(Math.floor(selectedFile.size * uploadProgress / 100))} of {formatFileSize(selectedFile.size)}\r\n          </p>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Incoming file transfers */}\r\n      {Object.entries(incomingFiles).length > 0 && (\r\n        <div className=\"mt-4\">\r\n          <h5>Incoming Files</h5>\r\n          {Object.entries(incomingFiles).map(([fileId, file]) => (\r\n            <div key={fileId} className=\"border rounded p-2 mb-2\">\r\n              <p className=\"mb-1\">Receiving: {file.fileName}</p>\r\n              <ProgressBar now={file.progress} label={`${file.progress}%`} />\r\n              <p className=\"small mt-1\">\r\n                {formatFileSize(file.receivedSize)} of {formatFileSize(file.fileSize)}\r\n              </p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n      \r\n      {/* Completed file transfers */}\r\n      {completedFiles.length > 0 && (\r\n        <div className=\"mt-4\">\r\n          <h5>Completed Transfers</h5>\r\n          {completedFiles.map((file) => (\r\n            <div key={file.fileId} className=\"border rounded p-2 mb-2\">\r\n              <p className=\"mb-1\">{file.fileName} ({formatFileSize(file.size)})</p>\r\n              <a \r\n                href={file.url} \r\n                download={file.fileName}\r\n                className=\"btn btn-sm btn-success\"\r\n              >\r\n                Download\r\n              </a>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileTransferPanel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}