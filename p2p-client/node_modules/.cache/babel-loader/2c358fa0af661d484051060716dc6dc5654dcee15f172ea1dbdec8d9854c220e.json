{"ast":null,"code":"const USER_INFO_KEY = 'p2p_user_info';\nclass AuthService {\n  getCurrentUser() {\n    const userInfoStr = localStorage.getItem(USER_INFO_KEY);\n    if (userInfoStr) {\n      try {\n        return JSON.parse(userInfoStr);\n      } catch (error) {\n        console.error('Error parsing user info:', error);\n        return null;\n      }\n    }\n    return null;\n  }\n  setCurrentUser(userInfo) {\n    localStorage.setItem(USER_INFO_KEY, JSON.stringify(userInfo));\n  }\n  logout() {\n    localStorage.removeItem(USER_INFO_KEY);\n  }\n  async generateInvitationCode() {\n    console.log('Generating invitation code...');\n    try {\n      const response = await fetch('http://localhost:5235/api/invitation/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Response status:', response.status);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error response:', errorText);\n        throw new Error(`Failed to generate invitation code: ${response.status} ${errorText}`);\n      }\n      const data = await response.json();\n      console.log('Response data:', data);\n      return data;\n    } catch (error) {\n      console.error('Error generating code:', error);\n      throw error;\n    }\n  }\n  async authenticateWithCode(invitationCode) {\n    console.log('Authenticating with code:', invitationCode);\n    try {\n      const response = await fetch('http://localhost:5235/api/invitation/authenticate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          invitationCode\n        })\n      });\n      console.log('Auth response status:', response.status);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Auth error response:', errorText);\n        try {\n          const errorData = JSON.parse(errorText);\n          throw new Error(errorData.message || 'Authentication failed');\n        } catch (e) {\n          throw new Error(`Authentication failed: ${response.status} ${errorText}`);\n        }\n      }\n      const data = await response.json();\n      console.log('Auth response data:', data);\n      return data;\n    } catch (error) {\n      console.error('Error authenticating:', error);\n      throw error;\n    }\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["USER_INFO_KEY","AuthService","getCurrentUser","userInfoStr","localStorage","getItem","JSON","parse","error","console","setCurrentUser","userInfo","setItem","stringify","logout","removeItem","generateInvitationCode","log","response","fetch","method","headers","status","ok","errorText","text","Error","data","json","authenticateWithCode","invitationCode","body","errorData","message","e"],"sources":["C:/Users/11427/Desktop/P2P/p2p-client/src/services/AuthService.js"],"sourcesContent":["const USER_INFO_KEY = 'p2p_user_info';\r\n\r\nclass AuthService {\r\n  getCurrentUser() {\r\n    const userInfoStr = localStorage.getItem(USER_INFO_KEY);\r\n    if (userInfoStr) {\r\n      try {\r\n        return JSON.parse(userInfoStr);\r\n      } catch (error) {\r\n        console.error('Error parsing user info:', error);\r\n        return null;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  setCurrentUser(userInfo) {\r\n    localStorage.setItem(USER_INFO_KEY, JSON.stringify(userInfo));\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem(USER_INFO_KEY);\r\n  }\r\n\r\n  async generateInvitationCode() {\r\n    console.log('Generating invitation code...');\r\n    try {\r\n      const response = await fetch('http://localhost:5235/api/invitation/generate', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      console.log('Response status:', response.status);\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('Error response:', errorText);\r\n        throw new Error(`Failed to generate invitation code: ${response.status} ${errorText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Response data:', data);\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error generating code:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async authenticateWithCode(invitationCode) {\r\n    console.log('Authenticating with code:', invitationCode);\r\n    try {\r\n      const response = await fetch('http://localhost:5235/api/invitation/authenticate', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ invitationCode })\r\n      });\r\n\r\n      console.log('Auth response status:', response.status);\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('Auth error response:', errorText);\r\n        try {\r\n          const errorData = JSON.parse(errorText);\r\n          throw new Error(errorData.message || 'Authentication failed');\r\n        } catch (e) {\r\n          throw new Error(`Authentication failed: ${response.status} ${errorText}`);\r\n        }\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Auth response data:', data);\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error authenticating:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}