{"ast":null,"code":"const USER_INFO_KEY = 'p2p_user_info';\nclass AuthService {\n  getCurrentUser() {\n    const userInfoStr = localStorage.getItem(USER_INFO_KEY);\n    if (userInfoStr) {\n      try {\n        return JSON.parse(userInfoStr);\n      } catch (error) {\n        console.error('Error parsing user info:', error);\n        return null;\n      }\n    }\n    return null;\n  }\n  setCurrentUser(userInfo) {\n    localStorage.setItem(USER_INFO_KEY, JSON.stringify(userInfo));\n  }\n  logout() {\n    localStorage.removeItem(USER_INFO_KEY);\n  }\n  async generateInvitationCode() {\n    console.log('Generating invitation code...');\n    try {\n      // 使用当前网页的主机名构建API URL\n      const currentHost = window.location.hostname;\n      // 如果是本地主机，使用localhost:5235，否则使用当前主机名配合5235端口\n      const apiUrl = currentHost === 'localhost' ? 'http://localhost:5235' : `http://${currentHost}:5235`;\n      console.log(`Using API URL: ${apiUrl}`);\n      const response = await fetch(`${apiUrl}/api/invitation/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        mode: 'cors'\n      });\n      console.log('Response status:', response.status);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error response:', errorText);\n        throw new Error(`Failed to generate invitation code: ${response.status} ${errorText}`);\n      }\n      const data = await response.json();\n      // 保存生成的邀请码到localStorage，使其在重定向后仍然可用\n      localStorage.setItem('p2p_last_invitation_code', data.invitationCode);\n      console.log('Response data:', data);\n      return data;\n    } catch (error) {\n      console.error('Error generating code:', error);\n      throw error;\n    }\n  }\n  async authenticateWithCode(invitationCode) {\n    // 先规范化邀请码，去除空白字符\n    const normalizedCode = invitationCode.trim();\n    console.log('Authenticating with code:', normalizedCode);\n    try {\n      // 使用当前网页的主机名构建API URL\n      const currentHost = window.location.hostname;\n      // 如果是本地主机，使用localhost:5235，否则使用当前主机名配合5235端口\n      const apiUrl = currentHost === 'localhost' ? 'http://localhost:5235' : `http://${currentHost}:5235`;\n      console.log(`Using API URL: ${apiUrl}`);\n      const response = await fetch(`${apiUrl}/api/invitation/authenticate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        mode: 'cors',\n        body: JSON.stringify({\n          invitationCode: normalizedCode\n        })\n      });\n      console.log('Auth response status:', response.status);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Auth error response:', errorText);\n        try {\n          const errorData = JSON.parse(errorText);\n          throw new Error(errorData.message || 'Authentication failed');\n        } catch (e) {\n          throw new Error(`Authentication failed: ${response.status} ${errorText}`);\n        }\n      }\n      const data = await response.json();\n      console.log('Auth response data:', data);\n      return data;\n    } catch (error) {\n      console.error('Error authenticating:', error);\n      throw error;\n    }\n  }\n}\n\n// 创建实例并导出，避免匿名默认导出\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["USER_INFO_KEY","AuthService","getCurrentUser","userInfoStr","localStorage","getItem","JSON","parse","error","console","setCurrentUser","userInfo","setItem","stringify","logout","removeItem","generateInvitationCode","log","currentHost","window","location","hostname","apiUrl","response","fetch","method","headers","credentials","mode","status","ok","errorText","text","Error","data","json","invitationCode","authenticateWithCode","normalizedCode","trim","body","errorData","message","e","authService"],"sources":["C:/Users/11427/Desktop/P2P/p2p-client/src/services/AuthService.js"],"sourcesContent":["const USER_INFO_KEY = 'p2p_user_info';\r\n\r\nclass AuthService {\r\n  getCurrentUser() {\r\n    const userInfoStr = localStorage.getItem(USER_INFO_KEY);\r\n    if (userInfoStr) {\r\n      try {\r\n        return JSON.parse(userInfoStr);\r\n      } catch (error) {\r\n        console.error('Error parsing user info:', error);\r\n        return null;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  setCurrentUser(userInfo) {\r\n    localStorage.setItem(USER_INFO_KEY, JSON.stringify(userInfo));\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem(USER_INFO_KEY);\r\n  }\r\n\r\n  async generateInvitationCode() {\r\n    console.log('Generating invitation code...');\r\n    try {\r\n      // 使用当前网页的主机名构建API URL\r\n      const currentHost = window.location.hostname;\r\n      // 如果是本地主机，使用localhost:5235，否则使用当前主机名配合5235端口\r\n      const apiUrl = currentHost === 'localhost' ? \r\n        'http://localhost:5235' : \r\n        `http://${currentHost}:5235`;\r\n      \r\n      console.log(`Using API URL: ${apiUrl}`);\r\n      \r\n      const response = await fetch(`${apiUrl}/api/invitation/generate`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'include',\r\n        mode: 'cors'\r\n      });\r\n\r\n      console.log('Response status:', response.status);\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('Error response:', errorText);\r\n        throw new Error(`Failed to generate invitation code: ${response.status} ${errorText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      // 保存生成的邀请码到localStorage，使其在重定向后仍然可用\r\n      localStorage.setItem('p2p_last_invitation_code', data.invitationCode);\r\n      console.log('Response data:', data);\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error generating code:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async authenticateWithCode(invitationCode) {\r\n    // 先规范化邀请码，去除空白字符\r\n    const normalizedCode = invitationCode.trim();\r\n    console.log('Authenticating with code:', normalizedCode);\r\n    \r\n    try {\r\n      // 使用当前网页的主机名构建API URL\r\n      const currentHost = window.location.hostname;\r\n      // 如果是本地主机，使用localhost:5235，否则使用当前主机名配合5235端口\r\n      const apiUrl = currentHost === 'localhost' ? \r\n        'http://localhost:5235' : \r\n        `http://${currentHost}:5235`;\r\n        \r\n      console.log(`Using API URL: ${apiUrl}`);\r\n      \r\n      const response = await fetch(`${apiUrl}/api/invitation/authenticate`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'include',\r\n        mode: 'cors',\r\n        body: JSON.stringify({ invitationCode: normalizedCode })\r\n      });\r\n\r\n      console.log('Auth response status:', response.status);\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('Auth error response:', errorText);\r\n        try {\r\n          const errorData = JSON.parse(errorText);\r\n          throw new Error(errorData.message || 'Authentication failed');\r\n        } catch (e) {\r\n          throw new Error(`Authentication failed: ${response.status} ${errorText}`);\r\n        }\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Auth response data:', data);\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error authenticating:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// 创建实例并导出，避免匿名默认导出\r\nconst authService = new AuthService();\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}